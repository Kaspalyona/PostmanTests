{
	"info": {
		"_postman_id": "003876f6-431c-4b12-8c66-458ddfaf3a46",
		"name": "Click up. Goals",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Positive tests",
			"item": [
				{
					"name": "Get goals without parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78a4fad4-70d9-439e-a06e-37d68def3820",
								"exec": [
									"let responseData = pm.response.json()",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response have goals and folders as an array\", function(){",
									"    pm.expect(responseData).to.have.property('goals');",
									"    pm.expect(responseData.goals).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('folders');",
									"    pm.expect(responseData.folders).to.be.an('array');",
									"});",
									"",
									"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
									"    responseData.goals.forEach((goal, index) => {",
									"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(goal).to.have.property('id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('name').that.is.a('string');",
									"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
									"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('color').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('due_date').that.is.a('string');",
									"            pm.expect(goal).to.have.property('description').that.is.a('string');",
									"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
									"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
									"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
									"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
									"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
									"            pm.expect(goal).to.have.property('members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No goals found or goals array is empty', function () {",
									"        pm.expect(responseData.goals).to.be.empty;",
									"    });",
									"}",
									"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
									"    responseData.folders.forEach((folder, index) => {",
									"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(folder).to.have.property('id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('name').that.is.a('string');",
									"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
									"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
									"            pm.expect(folder).to.have.property('members').that.is.an('array');",
									"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No folders found or folders array is empty', function () {",
									"        pm.expect(responseData.folders).to.be.empty;",
									"    });",
									"}",
									"",
									"",
									"var goals = responseData.goals[0];",
									"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20b53ddd-16f2-413a-9f17-61922191686d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9a9cf735-c64c-4408-b0c0-42affe7fc680",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{team_id_click_up}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get goals included completed goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78a4fad4-70d9-439e-a06e-37d68def3820",
								"exec": [
									"let responseData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response have goals and folders as an array\", function(){",
									"    pm.expect(responseData).to.have.property('goals');",
									"    pm.expect(responseData.goals).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('folders');",
									"    pm.expect(responseData.folders).to.be.an('array');",
									"});",
									"",
									"// Перевірка, чи наявні всі поля в відповіді і чи вони мають правильний тип даних",
									"",
									"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
									"    responseData.goals.forEach((goal, index) => {",
									"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(goal).to.have.property('id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('name').that.is.a('string');",
									"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
									"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('color').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('due_date').that.is.a('string');",
									"            pm.expect(goal).to.have.property('description').that.is.a('string');",
									"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
									"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
									"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
									"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
									"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
									"            pm.expect(goal).to.have.property('members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No goals found or goals array is empty', function () {",
									"        pm.expect(responseData.goals).to.be.empty;",
									"    });",
									"}",
									"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
									"    responseData.folders.forEach((folder, index) => {",
									"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(folder).to.have.property('id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('name').that.is.a('string');",
									"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
									"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
									"            pm.expect(folder).to.have.property('members').that.is.an('array');",
									"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No folders found or folders array is empty', function () {",
									"        pm.expect(responseData.folders).to.be.empty;",
									"    });",
									"}",
									"",
									"",
									"// Перевірка, чи є в масиві завершенні цілі",
									"",
									"function hasCompletedOne(array) {",
									"    return array.some(obj => obj.percent_completed === 1);",
									"}",
									"",
									"",
									"if (hasCompletedOne(responseData.goals)) {",
									"        pm.test('Completed goals are included', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test('Completed goals are not included or don\\'t exist', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.false;",
									"        });",
									"    }",
									"",
									"",
									"var goals = responseData.goals[0];",
									"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20b53ddd-16f2-413a-9f17-61922191686d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8e18e1f4-8083-4320-92ea-0104a208de63",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal?include_completed=true",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{team_id_click_up}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get goals without completed goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78a4fad4-70d9-439e-a06e-37d68def3820",
								"exec": [
									"let responseData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response have goals and folders as an array\", function(){",
									"    pm.expect(responseData).to.have.property('goals');",
									"    pm.expect(responseData.goals).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('folders');",
									"    pm.expect(responseData.folders).to.be.an('array');",
									"});",
									"",
									"// Перевірка, чи наявні всі поля в відповіді і чи вони мають правильний тип даних",
									"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
									"    responseData.goals.forEach((goal, index) => {",
									"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(goal).to.have.property('id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('name').that.is.a('string');",
									"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
									"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('color').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('due_date').that.is.a('string');",
									"            pm.expect(goal).to.have.property('description').that.is.a('string');",
									"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
									"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
									"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
									"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
									"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
									"            pm.expect(goal).to.have.property('members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No goals found or goals array is empty', function () {",
									"        pm.expect(responseData.goals).to.be.empty;",
									"    });",
									"}",
									"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
									"    responseData.folders.forEach((folder, index) => {",
									"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(folder).to.have.property('id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('name').that.is.a('string');",
									"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
									"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
									"            pm.expect(folder).to.have.property('members').that.is.an('array');",
									"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No folders found or folders array is empty', function () {",
									"        pm.expect(responseData.folders).to.be.empty;",
									"    });",
									"}",
									"",
									"// Перевірка, на виключення з масиву завершених цілей",
									"function hasCompletedOne(array) {",
									"    return array.some(obj => obj.percent_completed === 0);",
									"}",
									"",
									"if (hasCompletedOne(responseData.goals)) {",
									"        pm.test('Completed goals are not included or don\\'t exist', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test('Completed goals are included', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
									"        });",
									"    }",
									"",
									"",
									"var goals = responseData.goals[0];",
									"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20b53ddd-16f2-413a-9f17-61922191686d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c1def9d9-8da1-46c3-a70c-cb66cdd85498",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal?include_completed=false",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{team_id_click_up}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8775e017-6484-4105-b51d-e9e2db9237ec",
								"exec": [
									"var responseData = pm.response.json();",
									"var goal = responseData.goal;",
									"pm.collectionVariables.set(\"goal_id_click_up\", goal.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Перевіряєм чи всі поля наявні і відповідають типу даних який иає бути",
									"",
									"const goalSchema = {",
									"    'id': 'string',",
									"    'pretty_id': 'string',",
									"    'name': 'string',",
									"    'team_id': 'string',",
									"    'creator': 'number',",
									"    'color': 'string',",
									"    'date_created': 'string',",
									"    'start_date': ['string', 'null'],",
									"    'due_date': 'string',",
									"    'description': 'string',",
									"    'private': 'boolean',",
									"    'archived': 'boolean',",
									"    'editor_token': 'string',",
									"    'date_updated': 'string',",
									"    'owners': 'array',",
									"    'key_result_count': 'number',",
									"    'members': 'array',",
									"    'group_members': 'array',",
									"    'percent_completed': 'number',",
									"    'history': 'array',",
									"    'pretty_url': 'string'",
									"};",
									"",
									"function validateFieldType(value, expectedType) {",
									"    if (Array.isArray(expectedType)) {",
									"        return  expectedType.includes(typeof value) ||",
									"               (value === null && expectedType.includes('null'));",
									"    } else {",
									"        return typeof value === expectedType ||",
									"        (expectedType.includes('array') && Array.isArray(value));",
									"                 ",
									"    }",
									"}",
									"",
									"    pm.expect(responseData).to.have.property('goal');",
									"    // Перевірка на наявність кожного поля і відповідності типу даних",
									"    Object.entries(goalSchema).forEach(([field, expectedType]) => {",
									"        pm.test(`Field ${field} is present & datatype is ${expectedType}`, function () {",
									"            pm.expect(goal).to.have.property(field);",
									"            pm.expect(validateFieldType(goal[field], expectedType)).to.be.true",
									"            console.log(goal[field])",
									"        });",
									"    });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6aa66c29-a690-4604-a3ff-b1013e21c8cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": false,\n    \"owners\":[],\n    \"color\": \"#32a852\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal"
					},
					"response": []
				},
				{
					"name": "Get goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd04dff6-95a9-4723-b4bc-c8a642db4b80",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"id": "f64f15e3-0500-441e-a6da-acf2a4221400",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Update goal",
					"id": "1d0ccc8a-1b44-4c34-bba0-70c8512e4e54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Updated Goal Description\",\n    \"rem_owners\": [\n     \n    ],\n    \"add_owners\": [\n      \n    ],\n    \"color\": \"#32a852\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Delete goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45fa3d34-d4a8-4cfd-a3f0-81ca7dc4f051",
								"exec": [
									"// Присваювати нове значення змінній для колекціїї (якщо ще є цілі)",
									"//var api_click_up = pm.collectionVariables.get(\"api_click_up\")",
									"// var team_id_click_up = pm.collectionVariables.get(\"team_id_click_up\")",
									"// var auth_token_click_up = pm.collectionVariables.get(\"auth_token_click_up\")",
									"// console.log(auth_token_click_up)",
									"// pm.sendRequest({",
									"//     url: `${api_click_up}/v2/team/${pm.collectionVariables.get('team_id_click_up')}/goal?include_completed=true`,",
									"//     method: 'GET',",
									"//     headers: {",
									"//         'Authorization': '${auth_token_click_up}'",
									"//     }",
									"    ",
									"// }, function (err, response) {",
									"//     if (err) {",
									"//         console.error(err);",
									"//         return;",
									"//     }",
									"//     if (response && response.code === 200) {",
									"//         // Розпакування JSON з відповіді",
									"//         var responseData = response.json();",
									"        ",
									"//         // Тут можна зробити що завгодно з отриманими даними",
									"//         console.log(responseData);",
									"        ",
									"//         // Наприклад, зберегти дані у глобальну змінну Postman",
									"//         pm.collectionVariables.set('goal_id_click_up', responseData.goals.id);",
									"//     } else {",
									"//         console.error('Request failed');",
									"//     }",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bab7b2ef-f56b-4775-a7df-754bc94f05d2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9d72901b-1531-471f-9fb5-3ca1b415274c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Create key result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b4ead94-c476-4ee3-a6c0-89f6e2aaec69",
								"exec": [
									"var responceData = pm.response.json();",
									"var keyId = responceData.key_result.id;",
									"pm.collectionVariables.set(\"key_result_id_click_up\", keyId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "17cb03fb-61f3-48ed-ad09-9d138c9508a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"owners\": [\n    ],\n    \"type\": \"number\",\n    \"steps_start\": 0,\n    \"steps_end\": 1,\n    \"unit\": \"km\",\n    \"task_ids\": [],\n    \"list_ids\": []\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}/key_result"
					},
					"response": []
				},
				{
					"name": "Update key result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4ffa9ba-7287-4e31-bc3b-ece318d06312",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "323a2ebf-325a-4162-8822-a87cd24a6050",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"steps_current\": {{$randomAlphaNumeric}},\n    \"note\": \"Target achieved\"\n  }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/key_result/{{key_result_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Delete key result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "978bb546-fc8b-4264-bc01-6f16cb3d5b4f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Перейвірка на видаення",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"var api_click_up = pm.collectionVariables.get(\"api_click_up\")",
									"var team_id_click_up = pm.collectionVariables.get(\"team_id_click_up\")",
									"var auth_token_click_up = pm.collectionVariables.get(\"auth_token_click_up\")",
									"console.log(auth_token_click_up)",
									"pm.sendRequest({",
									"    url: `${api_click_up}/v2/team/${pm.collectionVariables.get('team_id_click_up')}/goal?include_completed=true`,",
									"    method: 'GET',",
									"    headers: {",
									"        'Authorization': '${auth_token_click_up}'",
									"    }",
									"    ",
									"}, function (err, response) {",
									"    if (err) {",
									"        console.error(err);",
									"        return;",
									"    }",
									"    if (response && response.code === 200) {",
									"        // Розпакування JSON з відповіді",
									"        var responseData = response.json();",
									"        ",
									"        // Тут можна зробити що завгодно з отриманими даними",
									"        console.log(responseData);",
									"        ",
									"        // Наприклад, зберегти дані у глобальну змінну Postman",
									"        pm.collectionVariables.set('goal_id_click_up', responseData.goals.id);",
									"    } else {",
									"        console.error('Request failed');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "74f466b8-7b93-45a5-a236-113a93411c35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{api_click_up}}v2/key_result/{key_result_id}"
					},
					"response": []
				}
			],
			"id": "51f71bff-2369-456d-97ad-086323338673"
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "Get goals with invalid team_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6b8704d9-12d7-4c88-8fa9-15c4e4071a8a",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9857bb8c-f5ed-47c5-9f20-cb450f192b42",
								"exec": [
									"let responceData = pm.response.json()",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dbf41ea3-be23-43c1-ae5f-2315d1311e64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{$randomInt}}/goal?include_completed=true",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{$randomInt}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a goal with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8775e017-6484-4105-b51d-e9e2db9237ec",
								"exec": [
									"var responseData = pm.response.json();",
									"var goal = responseData.goal;",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fb59e108-969c-4614-9180-7f2fcf15fc63",
								"exec": [
									"// Перевірка на відправку з пустим полем, змінюєм в тілі значення name на null",
									"var request = pm.request;",
									"var requestBody = JSON.parse(request.body.raw);",
									"requestBody.name = null; ",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e0dcc74c-0684-4f50-baaf-8d8dfad3a248",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": false,\n    \"owners\":[],\n    \"color\": \"#32a852\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal"
					},
					"response": []
				}
			],
			"id": "6b8f364f-a5eb-489c-aee5-1d56e102210d"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"key": "Authorization",
			"value": "{{auth_token_click_up}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ce55840e-d535-445d-9fc3-0151c969f1ca",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "877f3a82-35d9-4c1d-9247-62c2b43bb272",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_click_up",
			"value": "https://api.clickup.com/api"
		},
		{
			"key": "auth_token_click_up",
			"value": "pk_42579647_2H7TDWT119Q33WDAO3HU966JMNKD5J7C"
		},
		{
			"key": "team_id_click_up",
			"value": "9015713790",
			"type": "string"
		},
		{
			"key": "key_result_id_click_up",
			"value": "e4b6f4a3-489d-4505-b44d-64321e8d44be",
			"type": "string"
		},
		{
			"key": "goal_id_click_up",
			"value": "a32b0385-b5b3-4299-a442-7d36a8616ee3",
			"type": "string"
		},
		{
			"key": "team_id_invalid",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		}
	]
}