{
	"info": {
		"_postman_id": "55794a19-5938-4930-a25a-91498b11c283",
		"name": "Click up",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "22516955-55794a19-5938-4930-a25a-91498b11c283"
	},
	"item": [
		{
			"name": "Spaces",
			"item": [
				{
					"name": "Positive tests",
					"item": [
						{
							"name": "Get spaces without archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response have spaces as an array\", function(){",
											"    pm.expect(responseData).to.have.property('spaces');",
											"    pm.expect(responseData.spaces).to.be.an('array');",
											"});",
											"",
											"if (Array.isArray(responseData.spaces) && responseData.spaces.length > 0) {",
											"    responseData.spaces.forEach((space, index) => {",
											"    pm.test(`The spaces with id ${space.id} has all required fields with correct datatype`, function () {",
											"    pm.expect(space).to.have.property('id').that.is.a('string');",
											"    pm.expect(space).to.have.property('name').that.is.a('string');",
											"    pm.expect(space).to.have.property('color').that.satisfy(value => typeof value === 'string' || value === null);",
											"    pm.expect(space).to.have.property('private').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('avatar').that.satisfy(value => typeof value === 'string' || value === null);",
											"    pm.expect(space).to.have.property('admin_can_manage').that.satisfy(value => typeof value === 'boolean' || value === null);",
											"    pm.expect(space).to.have.property('multiple_assignees').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('archived').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('statuses').that.is.an('array');",
											"    pm.expect(space).to.have.property('features').that.is.an('object');",
											"",
											"     });",
											"    });",
											"} else {",
											"    pm.test('No sapces found or sapces array is empty', function () {",
											"        pm.expect(responseData.spaces).to.be.empty;",
											"    });",
											"}",
											"pm.test(\"Archieved is false\"), function(){",
											"    pm.expect(responseData.spaces.archived.is.false)",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "70d2c17d-7605-4924-babf-27282f2fddf4"
									}
								}
							],
							"id": "9619fd17-ded8-4b51-a8fe-f02713860b20",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									}
								],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/space?archived=false",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"space"
									],
									"query": [
										{
											"key": "archived",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get archived spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response have spaces as an array\", function(){",
											"    pm.expect(responseData).to.have.property('spaces');",
											"    pm.expect(responseData.spaces).to.be.an('array');",
											"});",
											"",
											"if (Array.isArray(responseData.spaces) && responseData.spaces.length > 0) {",
											"    responseData.spaces.forEach((space, index) => {",
											"    pm.test(`The spaces with id ${space.id} has all required fields with correct datatype`, function () {",
											"    pm.expect(space).to.have.property('id').that.is.a('string');",
											"    pm.expect(space).to.have.property('name').that.is.a('string');",
											"    pm.expect(space).to.have.property('color').that.satisfy(value => typeof value === 'string' || value === null);",
											"    pm.expect(space).to.have.property('private').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('avatar').that.satisfy(value => typeof value === 'string' || value === null);",
											"    pm.expect(space).to.have.property('admin_can_manage').that.satisfy(value => typeof value === 'boolean' || value === null);",
											"    pm.expect(space).to.have.property('multiple_assignees').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('archived').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('statuses').that.is.an('array');",
											"    pm.expect(space).to.have.property('features').that.is.an('object');",
											"",
											"     });",
											"    });",
											"} else {",
											"    pm.test('No sapces found or sapces array is empty', function () {",
											"        pm.expect(responseData.spaces).to.be.empty;",
											"    });",
											"}",
											"pm.test(\"Archieved is true\"), function(){",
											"    pm.expect(responseData.spaces.archived.is.true)",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c8f6585b-1b8e-4a37-99d1-30160d228adb"
									}
								}
							],
							"id": "c5f611c0-6e00-4a80-a7fa-8caea41a9935",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									}
								],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/space?archived=true",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"space"
									],
									"query": [
										{
											"key": "archived",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all spaces (without parameter archieved)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response have spaces as an array\", function(){",
											"    pm.expect(responseData).to.have.property('spaces');",
											"    pm.expect(responseData.spaces).to.be.an('array');",
											"});",
											"",
											"if (Array.isArray(responseData.spaces) && responseData.spaces.length > 0) {",
											"    responseData.spaces.forEach((space, index) => {",
											"    pm.test(`The spaces with id ${space.id} has all required fields with correct datatype`, function () {",
											"    pm.expect(space).to.have.property('id').that.is.a('string');",
											"    pm.expect(space).to.have.property('name').that.is.a('string');",
											"    pm.expect(space).to.have.property('color').that.satisfy(value => typeof value === 'string' || value === null);",
											"    pm.expect(space).to.have.property('private').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('avatar').that.satisfy(value => typeof value === 'string' || value === null);",
											"    pm.expect(space).to.have.property('admin_can_manage').that.satisfy(value => typeof value === 'boolean' || value === null);",
											"    pm.expect(space).to.have.property('multiple_assignees').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('archived').that.is.a('boolean');",
											"    pm.expect(space).to.have.property('statuses').that.is.an('array');",
											"    pm.expect(space).to.have.property('features').that.is.an('object');",
											"",
											"     });",
											"    });",
											"} else {",
											"    pm.test('No sapces found or sapces array is empty', function () {",
											"        pm.expect(responseData.spaces).to.be.empty;",
											"    });",
											"}",
											"pm.test(\"Archieved is false\"), function(){",
											"    pm.expect(responseData.spaces.archived.is.false)",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "e303d4d8-89bc-472e-a64c-b95204fd01ed"
									}
								}
							],
							"id": "3fd7fefb-a97b-49be-b390-eff70b302249",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									}
								],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/space",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"space"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create space with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = pm.response.json();",
											"var space = responseData;",
											"pm.collectionVariables.set(\"space_id_click_up\", responseData.id);",
											"pm.collectionVariables.set(\"space_name_exists\", responseData.name)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "61fdb5cf-200e-41f0-871d-913d4205112e"
									}
								}
							],
							"id": "635c476d-207a-4e42-a5ad-4920667b0f7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomWords}}+{{$randomWords}}\",\n    \"multiple_assignees\": true,\n    \"features\": {\n      \"due_dates\": {\n        \"enabled\": true,\n        \"start_date\": false,\n        \"remap_due_dates\": true,\n        \"remap_closed_due_date\": false\n      },\n      \"time_tracking\": {\n        \"enabled\": false\n      },\n      \"tags\": {\n        \"enabled\": true\n      },\n      \"time_estimates\": {\n        \"enabled\": true\n      },\n      \"checklists\": {\n        \"enabled\": true\n      },\n      \"custom_fields\": {\n        \"enabled\": true\n      },\n      \"remap_dependencies\": {\n        \"enabled\": true\n      },\n      \"dependency_warning\": {\n        \"enabled\": true\n      },\n      \"portfolios\": {\n        \"enabled\": true\n      }\n    }\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/space",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"space"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete space",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.collectionVariables.get(\"api_click_up\") + \"/v2/team/\" + pm.collectionVariables.get(\"team_id_click_up\") + \"/space?archived=false\",",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': pm.collectionVariables.get('auth_token_click_up')",
											"    }",
											"}, function (err, response) {",
											"    if (err) {",
											"        console.error(err);",
											"    } else {",
											"        var responseData = response.json();",
											"        console.log(responseData);",
											"",
											"        // Встановлення змінної колекції на основі першого елемента масиву spaces",
											"        pm.test(\"Check and set the first space id from the array to delete it\", function () {",
											"            if (Array.isArray(responseData.spaces) && responseData.spaces.length > 0) {",
											"                pm.collectionVariables.set(\"space_id_click_up\", responseData.spaces[0].id);",
											"            }",
											"        });",
											"",
											"        // Перевірка відповідності імені простору змінній колекції",
											"        pm.test(\"Check if the space name matches the collection variable and unset the variable\", function () {",
											"            var spaceNameExists = pm.collectionVariables.get(\"space_name_exists\");",
											"            ",
											"            if (responseData.spaces && responseData.spaces.length > 0) {",
											"                if (responseData.spaces[0].name === spaceNameExists) {",
											"                    console.log(\"Space name matches the collection variable:\");",
											"                    pm.collectionVariables.unset(\"space_name_exists\");",
											"                } else {",
											"                    pm.test('Deleted name does not match the collection variable', function () {",
											"                        pm.expect(responseData.spaces[0].name).to.not.eql(spaceNameExists);",
											"                        console.log(\"Space name does not match the collection variable:\");",
											"                    });",
											"                }",
											"            } else {",
											"                pm.test('No spaces found or spaces array is empty', function () {",
											"                    pm.expect(responseData.spaces).to.be.empty;",
											"                    console.log(\"No spaces found or spaces array is empty.\");",
											"                });",
											"            }",
											"        });",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "895200bf-c56d-40b6-b472-2eb975238f8a"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c0c43c6e-6bf3-413f-8a77-f5dab1ec9278"
									}
								}
							],
							"id": "8989c96e-6134-452b-b1b7-f754b11a22f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									}
								],
								"url": {
									"raw": "{{api_click_up}}/v2/space/{{space_id_click_up}}",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"space",
										"{{space_id_click_up}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "9b405a78-d563-4f63-be53-5201007dfe12"
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Get spaces with invalid team_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"pm.test(\"Error code is correct SHARD_001\"), function(){",
											"    pm.expect(responseData.ecode).to.include(\"SHARD_001\")",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "874ad7f2-9e6c-4ca4-a94d-5343dc77a396"
									}
								}
							],
							"id": "d9d4df75-2165-46f0-8ec3-c177de55de8f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									}
								],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{invalid_team_id}}/space?archived=false",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{invalid_team_id}}",
										"space"
									],
									"query": [
										{
											"key": "archived",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create space without name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "515c7475-7156-48fd-afe0-d8b278dc5f94"
									}
								}
							],
							"id": "18412d70-a690-453e-baa0-a7d9a21b8402",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"multiple_assignees\": true,\n    \"features\": {\n      \"due_dates\": {\n        \"enabled\": true,\n        \"start_date\": false,\n        \"remap_due_dates\": true,\n        \"remap_closed_due_date\": false\n      },\n      \"time_tracking\": {\n        \"enabled\": false\n      },\n      \"tags\": {\n        \"enabled\": true\n      },\n      \"time_estimates\": {\n        \"enabled\": true\n      },\n      \"checklists\": {\n        \"enabled\": true\n      },\n      \"custom_fields\": {\n        \"enabled\": true\n      },\n      \"remap_dependencies\": {\n        \"enabled\": true\n      },\n      \"dependency_warning\": {\n        \"enabled\": true\n      },\n      \"portfolios\": {\n        \"enabled\": true\n      }\n    }\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/space",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"space"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create space with the same name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"            url: pm.collectionVariables.get(\"api_click_up\") + \"/v2/team/\" + pm.collectionVariables.get(\"team_id_click_up\") + \"/space\",",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"                'Authorization': pm.collectionVariables.get('auth_token_click_up')",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": pm.collectionVariables.get(\"space_name_exists\")",
											"                }, function (err, response) {",
											"    if (err) {",
											"        console.error(err);",
											"    } else {",
											"        var responseData = response.json();",
											"        console.log(responseData);",
											"    }",
											"    }}",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "800bb9d6-94b6-4331-a587-dd2c0bee506c"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "68b1e87a-a215-4537-b6b2-ffbadf793e51"
									}
								}
							],
							"id": "33bb191d-554f-4b23-adca-527c7b3c2e22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "YOUR_API_KEY_HERE"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/space",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"space"
									]
								}
							},
							"response": []
						}
					],
					"id": "ac0dca10-87c1-463d-9a20-1333b223484f"
				}
			],
			"id": "1644666c-833f-4726-a162-c08563ca2562"
		},
		{
			"name": "Goals",
			"item": [
				{
					"name": "Positive tests",
					"item": [
						{
							"name": "Get goals without parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response have goals and folders as an array\", function(){",
											"    pm.expect(responseData).to.have.property('goals');",
											"    pm.expect(responseData.goals).to.be.an('array');",
											"    pm.expect(responseData).to.have.property('folders');",
											"    pm.expect(responseData.folders).to.be.an('array');",
											"});",
											"",
											"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
											"    responseData.goals.forEach((goal, index) => {",
											"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
											"            pm.expect(goal).to.have.property('id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('name').that.is.a('string');",
											"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
											"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('color').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
											"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('due_date').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('description').that.is.a('string');",
											"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
											"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
											"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
											"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
											"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
											"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
											"            pm.expect(goal).to.have.property('members').that.is.an('array');",
											"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
											"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
											"         });",
											"    });",
											"} else {",
											"    pm.test('No goals found or goals array is empty', function () {",
											"        pm.expect(responseData.goals).to.be.empty;",
											"    });",
											"}",
											"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
											"    responseData.folders.forEach((folder, index) => {",
											"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
											"            pm.expect(folder).to.have.property('id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('name').that.is.a('string');",
											"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
											"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
											"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
											"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
											"            pm.expect(folder).to.have.property('members').that.is.an('array');",
											"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
											"         });",
											"    });",
											"} else {",
											"    pm.test('No folders found or folders array is empty', function () {",
											"        pm.expect(responseData.folders).to.be.empty;",
											"    });",
											"}",
											"",
											"",
											"var goals = responseData.goals[0];",
											"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "aef56696-c17f-4c50-b56c-f34e79dd5017"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "459c3cab-5d6b-4671-a662-aa9abe8403c3"
									}
								}
							],
							"id": "54d8a2fa-cd04-4ddd-a205-004c36835b01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"goal"
									],
									"query": [
										{
											"key": "include_completed",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get goals included completed goals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response have goals and folders as an array\", function(){",
											"    pm.expect(responseData).to.have.property('goals');",
											"    pm.expect(responseData.goals).to.be.an('array');",
											"    pm.expect(responseData).to.have.property('folders');",
											"    pm.expect(responseData.folders).to.be.an('array');",
											"});",
											"",
											"// Перевірка, чи наявні всі поля в відповіді і чи вони мають правильний тип даних",
											"",
											"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
											"    responseData.goals.forEach((goal, index) => {",
											"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
											"            pm.expect(goal).to.have.property('id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('name').that.is.a('string');",
											"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
											"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('color').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
											"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('due_date').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('description').that.is.a('string');",
											"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
											"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
											"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
											"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
											"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
											"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
											"            pm.expect(goal).to.have.property('members').that.is.an('array');",
											"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
											"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
											"         });",
											"    });",
											"} else {",
											"    pm.test('No goals found or goals array is empty', function () {",
											"        pm.expect(responseData.goals).to.be.empty;",
											"    });",
											"}",
											"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
											"    responseData.folders.forEach((folder, index) => {",
											"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
											"            pm.expect(folder).to.have.property('id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('name').that.is.a('string');",
											"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
											"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
											"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
											"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
											"            pm.expect(folder).to.have.property('members').that.is.an('array');",
											"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
											"         });",
											"    });",
											"} else {",
											"    pm.test('No folders found or folders array is empty', function () {",
											"        pm.expect(responseData.folders).to.be.empty;",
											"    });",
											"}",
											"",
											"",
											"// Перевірка, чи є в масиві завершенні цілі",
											"",
											"function hasCompletedOne(array) {",
											"    return array.some(obj => obj.percent_completed === 1);",
											"}",
											"",
											"",
											"if (hasCompletedOne(responseData.goals)) {",
											"        pm.test('Completed goals are included', function() {",
											"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
											"        });",
											"    } else {",
											"        pm.test('Completed goals are not included or don\\'t exist', function() {",
											"            pm.expect(hasCompletedOne(responseData.goals)).to.be.false;",
											"        });",
											"    }",
											"",
											"",
											"var goals = responseData.goals[0];",
											"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "c24c12d2-65b9-4ad5-be39-1c37c33ec036"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "513ba59c-6e71-4b41-a580-cc24145fb365"
									}
								}
							],
							"id": "eaad2df9-18d2-4334-a374-cef229469bc5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal?include_completed=true",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"goal"
									],
									"query": [
										{
											"key": "include_completed",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get goals without completed goals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response have goals and folders as an array\", function(){",
											"    pm.expect(responseData).to.have.property('goals');",
											"    pm.expect(responseData.goals).to.be.an('array');",
											"    pm.expect(responseData).to.have.property('folders');",
											"    pm.expect(responseData.folders).to.be.an('array');",
											"});",
											"",
											"// Перевірка, чи наявні всі поля в відповіді і чи вони мають правильний тип даних",
											"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
											"    responseData.goals.forEach((goal, index) => {",
											"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
											"            pm.expect(goal).to.have.property('id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('name').that.is.a('string');",
											"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
											"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
											"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('color').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
											"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('due_date').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('description').that.is.a('string');",
											"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
											"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
											"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
											"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
											"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
											"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
											"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
											"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
											"            pm.expect(goal).to.have.property('members').that.is.an('array');",
											"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
											"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
											"         });",
											"    });",
											"} else {",
											"    pm.test('No goals found or goals array is empty', function () {",
											"        pm.expect(responseData.goals).to.be.empty;",
											"    });",
											"}",
											"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
											"    responseData.folders.forEach((folder, index) => {",
											"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
											"            pm.expect(folder).to.have.property('id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('name').that.is.a('string');",
											"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
											"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
											"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
											"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
											"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
											"            pm.expect(folder).to.have.property('members').that.is.an('array');",
											"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
											"         });",
											"    });",
											"} else {",
											"    pm.test('No folders found or folders array is empty', function () {",
											"        pm.expect(responseData.folders).to.be.empty;",
											"    });",
											"}",
											"",
											"// Перевірка, на виключення з масиву завершених цілей",
											"function hasCompletedOne(array) {",
											"    return array.some(obj => obj.percent_completed === 0);",
											"}",
											"",
											"if (hasCompletedOne(responseData.goals)) {",
											"        pm.test('Completed goals are not included or don\\'t exist', function() {",
											"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
											"        });",
											"    } else {",
											"        pm.test('Completed goals are included', function() {",
											"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
											"        });",
											"    }",
											"",
											"",
											"var goals = responseData.goals[0];",
											"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "39d5ffe4-471e-4f24-bdb0-95397bad5e2a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "0bff8c9b-10bd-4905-abaf-a4e55ec49d80"
									}
								}
							],
							"id": "7468bf1c-3598-4535-94bd-2f55870feae3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal?include_completed=false",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"goal"
									],
									"query": [
										{
											"key": "include_completed",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create goal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = pm.response.json();",
											"var goal = responseData.goal;",
											"pm.collectionVariables.set(\"goal_id_click_up\", goal.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Перевіряєм чи всі поля наявні і відповідають типу даних який иає бути",
											"",
											"const goalSchema = {",
											"    'id': 'string',",
											"    'pretty_id': 'string',",
											"    'name': 'string',",
											"    'team_id': 'string',",
											"    'creator': 'number',",
											"    'color': 'string',",
											"    'date_created': 'string',",
											"    'start_date': ['string', 'null'],",
											"    'due_date': 'string',",
											"    'description': 'string',",
											"    'private': 'boolean',",
											"    'archived': 'boolean',",
											"    'editor_token': 'string',",
											"    'date_updated': 'string',",
											"    'owners': 'array',",
											"    'key_result_count': 'number',",
											"    'members': 'array',",
											"    'group_members': 'array',",
											"    'percent_completed': 'number',",
											"    'history': 'array',",
											"    'pretty_url': 'string'",
											"};",
											"",
											"function validateFieldType(value, expectedType) {",
											"    if (Array.isArray(expectedType)) {",
											"        return  expectedType.includes(typeof value) ||",
											"               (value === null && expectedType.includes('null'));",
											"    } else {",
											"        return typeof value === expectedType ||",
											"        (expectedType.includes('array') && Array.isArray(value));",
											"                 ",
											"    }",
											"}",
											"",
											"    pm.expect(responseData).to.have.property('goal');",
											"    // Перевірка на наявність кожного поля і відповідності типу даних",
											"    Object.entries(goalSchema).forEach(([field, expectedType]) => {",
											"        pm.test(`Field ${field} is present & datatype is ${expectedType}`, function () {",
											"            pm.expect(goal).to.have.property(field);",
											"            pm.expect(validateFieldType(goal[field], expectedType)).to.be.true",
											"            console.log(goal[field])",
											"        });",
											"    });",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "447ca0c4-3499-4104-9ecb-fc6dd78af222"
									}
								}
							],
							"id": "c601a2af-303b-4191-bd86-5921bde96f11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": false,\n    \"owners\":[],\n    \"color\": \"#32a852\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"goal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get goal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "ba1bde69-945d-46ff-936b-b1ab54d24e4c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript",
										"id": "83919c3a-eb69-47c2-8e4d-d732688950ae"
									}
								}
							],
							"id": "6c65f2f9-b792-4c62-9537-d34004d93570",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"goal",
										"{{goal_id_click_up}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update goal",
							"id": "6d99e8a3-231e-4ef7-b675-d216d5cf166a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Updated Goal Description\",\n    \"rem_owners\": [\n     \n    ],\n    \"add_owners\": [\n      \n    ],\n    \"color\": \"#32a852\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"goal",
										"{{goal_id_click_up}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create key result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"    console.log(response.json());",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "57c74b5d-a18c-4be2-b3c9-ac682950cfd1"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responceData = pm.response.json();",
											"var keyId = responceData.key_result.id;",
											"pm.collectionVariables.set(\"key_result_id_click_up\", keyId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "e4791d25-a4fe-485a-8cfc-2bdca886db59"
									}
								}
							],
							"id": "0ac4f41d-5264-4cfc-8135-b049316a4a61",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"owners\": [\n    ],\n    \"type\": \"number\",\n    \"steps_start\": 0,\n    \"steps_end\": 1,\n    \"unit\": \"km\",\n    \"task_ids\": [],\n    \"list_ids\": []\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}/key_result",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"goal",
										"{{goal_id_click_up}}",
										"key_result"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update key result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "68003a37-2e57-4cba-81fd-2fef37ce6877"
									}
								}
							],
							"id": "674bcaaf-b53f-4af0-a6e8-788785c07fb5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomWords}}\"\n  }\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/key_result/{{key_result_id_click_up}}",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"key_result",
										"{{key_result_id_click_up}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete key result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Перейвірка на видаення",
											"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"    console.log(response.json());",
											"});",
											"var api_click_up = pm.collectionVariables.get(\"api_click_up\")",
											"var team_id_click_up = pm.collectionVariables.get(\"team_id_click_up\")",
											"var auth_token_click_up = pm.collectionVariables.get(\"auth_token_click_up\")",
											"console.log(auth_token_click_up)",
											"pm.sendRequest({",
											"    url: `${api_click_up}/v2/team/${pm.collectionVariables.get('team_id_click_up')}/goal?include_completed=true`,",
											"    method: 'GET',",
											"    headers: {",
											"        'Authorization': '${auth_token_click_up}'",
											"    }",
											"    ",
											"}, function (err, response) {",
											"    if (err) {",
											"        console.error(err);",
											"        return;",
											"    }",
											"    if (response && response.code === 200) {",
											"        // Розпакування JSON з відповіді",
											"        var responseData = response.json();",
											"        ",
											"        // Тут можна зробити що завгодно з отриманими даними",
											"        console.log(responseData);",
											"        ",
											"        // Наприклад, зберегти дані у глобальну змінну Postman",
											"        pm.collectionVariables.set('goal_id_click_up', responseData.goals.id);",
											"    } else {",
											"        console.error('Request failed');",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "8eaa3d64-fa4b-4e6c-98ad-4d8c71db0bef"
									}
								}
							],
							"id": "c6cc057c-977d-41f1-89e1-44ffa0713c5d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_click_up}}v2/key_result/{key_result_id}",
									"host": [
										"{{api_click_up}}v2"
									],
									"path": [
										"key_result",
										"{key_result_id}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete goal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Присваювати нове значення змінній для колекціїї (якщо ще є цілі)",
											"//var api_click_up = pm.collectionVariables.get(\"api_click_up\")",
											"// var team_id_click_up = pm.collectionVariables.get(\"team_id_click_up\")",
											"// var auth_token_click_up = pm.collectionVariables.get(\"auth_token_click_up\")",
											"// console.log(auth_token_click_up)",
											"// pm.sendRequest({",
											"//     url: `${api_click_up}/v2/team/${pm.collectionVariables.get('team_id_click_up')}/goal?include_completed=true`,",
											"//     method: 'GET',",
											"//     headers: {",
											"//         'Authorization': '${auth_token_click_up}'",
											"//     }",
											"    ",
											"// }, function (err, response) {",
											"//     if (err) {",
											"//         console.error(err);",
											"//         return;",
											"//     }",
											"//     if (response && response.code === 200) {",
											"//         // Розпакування JSON з відповіді",
											"//         var responseData = response.json();",
											"        ",
											"//         // Тут можна зробити що завгодно з отриманими даними",
											"//         console.log(responseData);",
											"        ",
											"//         // Наприклад, зберегти дані у глобальну змінну Postman",
											"//         pm.collectionVariables.set('goal_id_click_up', responseData.goals.id);",
											"//     } else {",
											"//         console.error('Request failed');",
											"//     }",
											"// });"
										],
										"type": "text/javascript",
										"packages": {},
										"id": "77601a9c-13da-4cd4-8413-a5f2e46ea662"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "7d7f0904-e3e2-4be2-afbc-740aed3dd9fa"
									}
								}
							],
							"id": "f5887a5b-2bff-49d3-b9e8-acd329fc5f46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"goal",
										"{{goal_id_click_up}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "8ec135b6-3fb9-476b-9cb4-355ade2a4827"
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Get goals with invalid team_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "401cfba2-9bd7-493b-a96a-0d2e62948e4b"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responceData = pm.response.json()",
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "8e752820-7739-40ff-b498-c12c2d6f0a12"
									}
								}
							],
							"id": "a479d869-4629-4ee0-aec6-28791d4c9ec2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{$randomInt}}/goal?include_completed=true",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{$randomInt}}",
										"goal"
									],
									"query": [
										{
											"key": "include_completed",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a goal with empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseData = pm.response.json();",
											"var goal = responseData.goal;",
											"",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "72108a5c-9087-4cf9-833e-67008e343f4e"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Перевірка на відправку з пустим полем, змінюєм в тілі значення name на null",
											"var request = pm.request;",
											"var requestBody = JSON.parse(request.body.raw);",
											"requestBody.name = null; ",
											"pm.request.body.raw = JSON.stringify(requestBody);",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "23148ea8-a577-4233-a59e-5263c8aa971d"
									}
								}
							],
							"id": "28cafe3c-d2d7-4cc2-8584-30ae6ac87cf3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": false,\n    \"owners\":[],\n    \"color\": \"#32a852\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal",
									"host": [
										"{{api_click_up}}"
									],
									"path": [
										"v2",
										"team",
										"{{team_id_click_up}}",
										"goal"
									]
								}
							},
							"response": []
						}
					],
					"id": "05d3d88e-ee10-4223-bf0e-da7f6166b1ba"
				}
			],
			"id": "8b479d3c-2821-40b5-b401-79404b8d325f"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{auth_token_click_up}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "44536cca-b409-4e67-89c0-be1726db9b1a"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				],
				"id": "fc7815e0-f783-47f5-a963-9241e4d20bc5"
			}
		}
	],
	"variable": [
		{
			"id": "0b8bfcaf-0416-417a-9da2-32dec4e644de",
			"key": "api_click_up",
			"value": "https://api.clickup.com/api"
		},
		{
			"id": "efb46cb5-f655-4d69-9f0f-9acb1b065995",
			"key": "auth_token_click_up",
			"value": "pk_74545570_U9HXYVA5CWVZSOHLEDWJCV0IQFKEECEG"
		},
		{
			"id": "91b792c4-fda5-4a16-9cf6-77bc9788df7e",
			"key": "team_id_click_up",
			"value": "9015765205",
			"type": "string"
		},
		{
			"id": "f4672cb1-6777-4329-b6bf-210acda81694",
			"key": "key_result_id_click_up",
			"value": "e4b6f4a3-489d-4505-b44d-64321e8d44be",
			"type": "string"
		},
		{
			"id": "c8180bb9-1817-4c4c-8d4c-bbb5b85637cc",
			"key": "goal_id_click_up",
			"value": "a32b0385-b5b3-4299-a442-7d36a8616ee3",
			"type": "string"
		},
		{
			"id": "2b3f5595-3ddd-473b-b991-f0a32b8d55ee",
			"key": "invalid_team_id",
			"value": "hello",
			"type": "string"
		},
		{
			"id": "3a0d394a-011f-40a3-a4f5-4e07449bad4d",
			"key": "space_click_up",
			"value": ""
		},
		{
			"id": "7007505c-7536-4138-99d3-261f3d083bea",
			"key": "space_id_click_up",
			"value": ""
		},
		{
			"id": "f73e2b65-e7a7-4042-ac16-bd634c93741a",
			"key": "spaspace_id_click_up",
			"value": ""
		},
		{
			"id": "b95579c8-9b6d-4135-a971-411228fa712b",
			"key": "space_name_exists",
			"value": ""
		}
	]
}