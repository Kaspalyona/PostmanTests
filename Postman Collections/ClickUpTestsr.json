{
	"info": {
		"_postman_id": "19b61845-e070-408e-a26c-27c0fad1ab17",
		"name": "Click up. Goals Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Positive tests",
			"item": [
				{
					"name": "Get goals without parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53ca6bbb-60ac-44b5-b3ae-56ffef7a1277",
								"exec": [
									"let responseData = pm.response.json()",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response have goals and folders as an array\", function(){",
									"    pm.expect(responseData).to.have.property('goals');",
									"    pm.expect(responseData.goals).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('folders');",
									"    pm.expect(responseData.folders).to.be.an('array');",
									"});",
									"",
									"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
									"    responseData.goals.forEach((goal, index) => {",
									"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(goal).to.have.property('id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('name').that.is.a('string');",
									"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
									"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('color').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('due_date').that.is.a('string');",
									"            pm.expect(goal).to.have.property('description').that.is.a('string');",
									"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
									"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
									"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
									"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
									"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
									"            pm.expect(goal).to.have.property('members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No goals found or goals array is empty', function () {",
									"        pm.expect(responseData.goals).to.be.empty;",
									"    });",
									"}",
									"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
									"    responseData.folders.forEach((folder, index) => {",
									"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(folder).to.have.property('id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('name').that.is.a('string');",
									"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
									"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
									"            pm.expect(folder).to.have.property('members').that.is.an('array');",
									"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No folders found or folders array is empty', function () {",
									"        pm.expect(responseData.folders).to.be.empty;",
									"    });",
									"}",
									"",
									"",
									"if(responseData.goals > 0){",
									"var goals = responseData.goals[0];",
									"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9b640006-5673-4043-9866-80079d63ff73",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a23dbf27-71d6-44b9-9f12-57def1f9b59b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{team_id_click_up}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get goals included completed goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46726b4-e2d0-4a0e-8289-f5ff058a167e",
								"exec": [
									"let responseData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response have goals and folders as an array\", function(){",
									"    pm.expect(responseData).to.have.property('goals');",
									"    pm.expect(responseData.goals).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('folders');",
									"    pm.expect(responseData.folders).to.be.an('array');",
									"});",
									"",
									"// Перевірка, чи наявні всі поля в відповіді і чи вони мають правильний тип даних",
									"",
									"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
									"    responseData.goals.forEach((goal, index) => {",
									"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(goal).to.have.property('id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('name').that.is.a('string');",
									"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
									"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('color').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('due_date').that.is.a('string');",
									"            pm.expect(goal).to.have.property('description').that.is.a('string');",
									"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
									"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
									"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
									"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
									"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
									"            pm.expect(goal).to.have.property('members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No goals found or goals array is empty', function () {",
									"        pm.expect(responseData.goals).to.be.empty;",
									"    });",
									"}",
									"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
									"    responseData.folders.forEach((folder, index) => {",
									"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(folder).to.have.property('id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('name').that.is.a('string');",
									"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
									"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
									"            pm.expect(folder).to.have.property('members').that.is.an('array');",
									"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No folders found or folders array is empty', function () {",
									"        pm.expect(responseData.folders).to.be.empty;",
									"    });",
									"}",
									"",
									"",
									"// Перевірка, чи є в масиві завершенні цілі",
									"",
									"function hasCompletedOne(array) {",
									"    return array.some(obj => obj.percent_completed === 1);",
									"}",
									"",
									"",
									"if (hasCompletedOne(responseData.goals)) {",
									"        pm.test('Completed goals are included', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test('Completed goals are not included or don\\'t exist', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.false;",
									"        });",
									"    }",
									"",
									"",
									"if(responseData.goals > 0){",
									"var goals = responseData.goals[0];",
									"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f8c3e751-a530-4ba7-b914-81603cfa5244",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "804182d4-792e-4e6b-a8c8-d6dbd6e40476",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal?include_completed=true",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{team_id_click_up}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get goals without completed goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a256a41f-99de-457f-91c5-d2770fc35ddb",
								"exec": [
									"let responseData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response have goals and folders as an array\", function(){",
									"    pm.expect(responseData).to.have.property('goals');",
									"    pm.expect(responseData.goals).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('folders');",
									"    pm.expect(responseData.folders).to.be.an('array');",
									"});",
									"",
									"// Перевірка, чи наявні всі поля в відповіді і чи вони мають правильний тип даних",
									"if (Array.isArray(responseData.goals) && responseData.goals.length > 0) {",
									"    responseData.goals.forEach((goal, index) => {",
									"        pm.test(`The goal with id ${goal.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(goal).to.have.property('id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('name').that.is.a('string');",
									"            pm.expect(goal).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(goal).to.have.property('creator').that.is.a('number');",
									"            pm.expect(goal).to.have.property('owner').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('color').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(goal).to.have.property('start_date').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('due_date').that.is.a('string');",
									"            pm.expect(goal).to.have.property('description').that.is.a('string');",
									"            pm.expect(goal).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('archived').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('multiple_owners').satisfy(value => typeof value === 'boolean' || value === null);",
									"            pm.expect(goal).to.have.property('editor_token').that.is.a('string');",
									"            pm.expect(goal).to.have.property('date_updated').that.is.a('string');",
									"            pm.expect(goal).to.have.property('last_update').that.is.a('string');",
									"            pm.expect(goal).to.have.property('folder_id').that.satisfy(value => typeof value === 'string' || value === null);",
									"            pm.expect(goal).to.have.property('pinned').that.is.a('boolean');",
									"            pm.expect(goal).to.have.property('owners').that.is.an('array');",
									"            pm.expect(goal).to.have.property('key_result_count').that.is.a('number');",
									"            pm.expect(goal).to.have.property('members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('group_members').that.is.an('array');",
									"            pm.expect(goal).to.have.property('percent_completed').that.is.a('number');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No goals found or goals array is empty', function () {",
									"        pm.expect(responseData.goals).to.be.empty;",
									"    });",
									"}",
									"if (Array.isArray(responseData.folders) && responseData.folders.length > 0) {",
									"    responseData.folders.forEach((folder, index) => {",
									"        pm.test(`The folder with id ${folder.id} has all required fields with correct datatype`, function () {",
									"            pm.expect(folder).to.have.property('id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('pretty_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('name').that.is.a('string');",
									"            pm.expect(folder).to.have.property('team_id').that.is.a('string');",
									"            pm.expect(folder).to.have.property('private').that.is.a('boolean');",
									"            pm.expect(folder).to.have.property('date_created').that.is.a('string');",
									"            pm.expect(folder).to.have.property('creator').that.is.a('number');",
									"            pm.expect(folder).to.have.property('goal_count').that.is.a('number');",
									"            pm.expect(folder).to.have.property('members').that.is.an('array');",
									"            pm.expect(folder).to.have.property('goals').that.is.a('array');",
									"         });",
									"    });",
									"} else {",
									"    pm.test('No folders found or folders array is empty', function () {",
									"        pm.expect(responseData.folders).to.be.empty;",
									"    });",
									"}",
									"",
									"// Перевірка, на виключення з масиву завершених цілей",
									"function hasCompletedOne(array) {",
									"    return array.some(obj => obj.percent_completed === 0);",
									"}",
									"",
									"if (hasCompletedOne(responseData.goals)) {",
									"        pm.test('Completed goals are not included or don\\'t exist', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test('Completed goals are included', function() {",
									"            pm.expect(hasCompletedOne(responseData.goals)).to.be.true;",
									"        });",
									"    }",
									"",
									"",
									"if(responseData.goals > 0){",
									"var goals = responseData.goals[0];",
									"pm.collectionVariables.set(\"goal_id_click_up\", goals.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b1c10b1b-4267-4997-8fe4-1a5c687eea98",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b8289029-5531-4e7f-88e0-43add7a046ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal?include_completed=false",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{team_id_click_up}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"var goal = responseData.goal;",
									"pm.collectionVariables.set(\"goal_id_click_up\", goal.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Перевіряєм чи всі поля наявні і відповідають типу даних який иає бути",
									"",
									"const goalSchema = {",
									"    'id': 'string',",
									"    'pretty_id': 'string',",
									"    'name': 'string',",
									"    'team_id': 'string',",
									"    'creator': 'number',",
									"    'color': 'string',",
									"    'date_created': 'string',",
									"    'start_date': ['string', 'null'],",
									"    'due_date': 'string',",
									"    'description': 'string',",
									"    'private': 'boolean',",
									"    'archived': 'boolean',",
									"    'editor_token': 'string',",
									"    'date_updated': 'string',",
									"    'owners': 'array',",
									"    'key_result_count': 'number',",
									"    'members': 'array',",
									"    'group_members': 'array',",
									"    'percent_completed': 'number',",
									"    'history': 'array',",
									"    'pretty_url': 'string'",
									"};",
									"",
									"function validateFieldType(value, expectedType) {",
									"    if (Array.isArray(expectedType)) {",
									"        return  expectedType.includes(typeof value) ||",
									"               (value === null && expectedType.includes('null'));",
									"    } else {",
									"        return typeof value === expectedType ||",
									"        (expectedType.includes('array') && Array.isArray(value));",
									"                 ",
									"    }",
									"}",
									"",
									"    pm.expect(responseData).to.have.property('goal');",
									"    // Перевірка на наявність кожного поля і відповідності типу даних",
									"    Object.entries(goalSchema).forEach(([field, expectedType]) => {",
									"        pm.test(`Field ${field} is present & datatype is ${expectedType}`, function () {",
									"            pm.expect(goal).to.have.property(field);",
									"            pm.expect(validateFieldType(goal[field], expectedType)).to.be.true",
									"            console.log(goal[field])",
									"        });",
									"    });",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "13012f23-6966-4ac5-a816-00843904157a"
							}
						}
					],
					"id": "db1f87b8-eafd-4e74-9364-8a079ab49d29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": false,\n    \"owners\":[],\n    \"color\": \"#32a852\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal"
					},
					"response": []
				},
				{
					"name": "Get goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "677e12f8-6b6f-4821-8100-1864b5b54bc5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript",
								"id": "c492042b-a97a-4668-9a0e-5a6fadc31361"
							}
						}
					],
					"id": "6c6ca4d9-bc2f-4125-8f36-94f49ac95046",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Update goal",
					"id": "8ca14f40-9bb6-401f-b931-9418b8b02a0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Updated Goal Description\",\n    \"rem_owners\": [\n     \n    ],\n    \"add_owners\": [\n      \n    ],\n    \"color\": \"#32a852\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Create key result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responceData = pm.response.json();",
									"var keyId = responceData.key_result.id;",
									"pm.collectionVariables.set(\"key_result_id_click_up\", keyId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "2b7ab7d9-3dd3-4d21-b82f-5d6252636f27"
							}
						}
					],
					"id": "0c7b9cc5-8f2b-45b6-8a4f-eebc95ffe05c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"owners\": [\n    ],\n    \"type\": \"number\",\n    \"steps_start\": 0,\n    \"steps_end\": 1,\n    \"unit\": \"km\",\n    \"task_ids\": [],\n    \"list_ids\": []\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}/key_result"
					},
					"response": []
				},
				{
					"name": "Update key result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "8003ebcf-ad63-482c-92b9-836c25248e4b"
							}
						}
					],
					"id": "ad6f0d57-592e-4db7-880e-3104c1ea593b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"steps_current\": {{$randomAlphaNumeric}},\n    \"note\": \"Target achieved\"\n  }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/key_result/{{key_result_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Delete key result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee7d3ed2-a6c0-4df6-9a9a-b3b41bc9d7cd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Перейвірка на видаення",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"var api_click_up = pm.collectionVariables.get(\"api_click_up\")",
									"var team_id_click_up = pm.collectionVariables.get(\"team_id_click_up\")",
									"var auth_token_click_up = pm.collectionVariables.get(\"auth_token_click_up\")",
									"console.log(auth_token_click_up)",
									"pm.sendRequest({",
									"    url: `${api_click_up}/v2/team/${pm.collectionVariables.get('team_id_click_up')}/goal?include_completed=true`,",
									"    method: 'GET',",
									"    headers: {",
									"        'Authorization': '${auth_token_click_up}'",
									"    }",
									"    ",
									"}, function (err, response) {",
									"    if (err) {",
									"        console.error(err);",
									"        return;",
									"    }",
									"    if (response && response.code === 200) {",
									"        // Розпакування JSON з відповіді",
									"        var responseData = response.json();",
									"        ",
									"        // Тут можна зробити що завгодно з отриманими даними",
									"        console.log(responseData);",
									"        ",
									"        // Наприклад, зберегти дані у глобальну змінну Postman",
									"        pm.collectionVariables.set('goal_id_click_up', responseData.goals.id);",
									"    } else {",
									"        console.error('Request failed');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fb00e8df-3148-4114-982b-eaf196d2f5da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{api_click_up}}v2/key_result/{{key_result_id_click_up}}"
					},
					"response": []
				},
				{
					"name": "Delete goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Присваювати нове значення змінній для колекціїї (якщо ще є цілі)",
									"//var api_click_up = pm.collectionVariables.get(\"api_click_up\")",
									"// var team_id_click_up = pm.collectionVariables.get(\"team_id_click_up\")",
									"// var auth_token_click_up = pm.collectionVariables.get(\"auth_token_click_up\")",
									"// console.log(auth_token_click_up)",
									"// pm.sendRequest({",
									"//     url: `${api_click_up}/v2/team/${pm.collectionVariables.get('team_id_click_up')}/goal?include_completed=true`,",
									"//     method: 'GET',",
									"//     headers: {",
									"//         'Authorization': '${auth_token_click_up}'",
									"//     }",
									"    ",
									"// }, function (err, response) {",
									"//     if (err) {",
									"//         console.error(err);",
									"//         return;",
									"//     }",
									"//     if (response && response.code === 200) {",
									"//         // Розпакування JSON з відповіді",
									"//         var responseData = response.json();",
									"        ",
									"//         // Тут можна зробити що завгодно з отриманими даними",
									"//         console.log(responseData);",
									"        ",
									"//         // Наприклад, зберегти дані у глобальну змінну Postman",
									"//         pm.collectionVariables.set('goal_id_click_up', responseData.goals.id);",
									"//     } else {",
									"//         console.error('Request failed');",
									"//     }",
									"// });"
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4ec0a9d5-f21c-47ba-bf24-6fd7349ad938"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7f19374d-3043-41c5-889c-c5d8fcfd25d0"
							}
						}
					],
					"id": "d75df57d-86d3-41af-a9ef-2cb12153e4d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "{{api_click_up}}/v2/goal/{{goal_id_click_up}}"
					},
					"response": []
				}
			],
			"id": "f320231c-1f55-42b5-9299-65aabe02c1a0"
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "Get goals with invalid team_id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "0c9afc05-aacd-4c9e-881e-46aabaae84c9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responceData = pm.response.json()",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "24757e6c-ea04-43eb-85e0-de44129ba8a3"
							}
						}
					],
					"id": "97e8dfcd-e655-4d12-ad93-c3a5bb936901",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_click_up}}/v2/team/{{$randomInt}}/goal?include_completed=true",
							"host": [
								"{{api_click_up}}"
							],
							"path": [
								"v2",
								"team",
								"{{$randomInt}}",
								"goal"
							],
							"query": [
								{
									"key": "include_completed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a goal with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"var goal = responseData.goal;",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "a0cd1e13-d4bc-4964-80eb-9b19f06bce0b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Перевірка на відправку з пустим полем, змінюєм в тілі значення name на null",
									"var request = pm.request;",
									"var requestBody = JSON.parse(request.body.raw);",
									"requestBody.name = null; ",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "4dec7957-f288-46e3-b02b-b84e908fa5f3"
							}
						}
					],
					"id": "c79dd23e-40d6-4260-8cef-0f927a238438",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomWords}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": false,\n    \"owners\":[],\n    \"color\": \"#32a852\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{api_click_up}}/v2/team/{{team_id_click_up}}/goal"
					},
					"response": []
				}
			],
			"id": "26bcd661-05e5-43c8-8a88-c78b22cc9202"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"key": "Authorization",
			"value": "{{auth_token_click_up}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bbc0dbe7-86e8-42e3-9eed-8f63edba1ad6",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f84f53d5-9dc9-4f33-b8c5-c44af2a77240",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_click_up",
			"value": "https://api.clickup.com/api"
		},
		{
			"key": "auth_token_click_up",
			"value": "pk_42579647_2H7TDWT119Q33WDAO3HU966JMNKD5J7C"
		},
		{
			"key": "team_id_click_up",
			"value": "9015713790",
			"type": "string"
		},
		{
			"key": "key_result_id_click_up",
			"value": "e4b6f4a3-489d-4505-b44d-64321e8d44be",
			"type": "string"
		},
		{
			"key": "goal_id_click_up",
			"value": "a32b0385-b5b3-4299-a442-7d36a8616ee3",
			"type": "string"
		},
		{
			"key": "team_id_invalid",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		}
	]
}